#!/usr/bin/env node

const http = require('http')
const crypto = require('crypto')
const fs = require('fs')

const { spawn } = require("child_process");

const Bot = require('keybase-bot')
const bot = new Bot()

const secret	=	process.env.GITHUB_SECRET
const username	=	process.env.KB_BOT_USERNAME
const paperkey	=	process.env.KB_BOT_PAPERKEY
const team	=	process.env.KB_TEAM
const channel	=	process.env.KB_CHANNEL
const buildcmd	=	process.env.BUILD_CMD

const server = http.createServer
(
    (req, res) =>
    {
        let body = []
        req.on('data', (chunk) => body.push(chunk))
        req.on('end', () =>
            {
                try
                {
                    req.body = JSON.parse(Buffer.concat(body).toString())
                }
                catch (e)
                {
                    req.body = Buffer.concat(body).toString()
                }
                try
                {
                    res.statusCode = handle(req, res)
                    res.end()
                }
                catch (e)
                {
                    console.log("Error! "+e)
                    res.statusCode = 500
                    res.end()
                }
            }
        )
    }
)

async function main()
{
    try
    {
        await bot.init(username, paperkey, { verbose: false })
        await server.listen(2222)
        console.log('Ready!')
    }
    catch (error)
    {
        console.log(error)
    }
}

function handle(req, res)
{
    const payload = JSON.stringify(req.body) || ''
    if (payload == '')
    {
        console.log(`Request missing body, bad request.`)
        return 400
    }

    const sig = req.headers['x-hub-signature'] || ''
    if (sig == '')
    {
        console.log(`Request not signed, forbidden.`)
        return 403
    }

    const hmac = crypto.createHmac('sha1', secret)
    const digest = Buffer.from('sha1=' + hmac.update(payload).digest('hex'), 'utf8')
    const checksum = Buffer.from(sig, 'utf8')
    if (checksum.length !== digest.length || !crypto.timingSafeEqual(digest, checksum)) {
        console.log(`Request body digest (${digest}) did not match (${checksum})`)
        return 403
    }

    // https://developer.github.com/v3/activity/events/types/#pushevent
    if (req.headers['x-github-event'] === 'push')
    {
        sendMessageToTeamChannel(team, channel, `Signature verified for GitHub push event for ${req.body.repository.full_name} sent by @${req.body.sender.login} for ${req.body.ref}`)
        if (req.body.ref == 'refs/heads/master')
            rebuild()
        //console.log(req.body)
    }
    else
    {
        //console.log(`Unhandled event type (${req.headers['x-github-event']}), ignoring`)
        return 200
    }

    return 200
}

function cleanup()
{
    bot.deinit()
}

async function sendMessageToTeamChannel(teamName, channelName, body)    
{    
    const channel =                                                                                                                                            
    {                                                                                                                                                          
        membersType: 'team',    
        topicType: 'chat',    
        name: teamName,    
        topicName: channelName,    
    }    
    const message =    
    {    
        body: body    
    }    
    console.log(`Sending message to ${teamName}#${channelName}: ${body}`)    
    await bot.chat.send(channel, message)
}

async function rebuild()
{
    sendMessageToTeamChannel(team, channel, `Rebuilding site!`)
    spawn(buildcmd);
}

process.on('exit', cleanup)
main()

console.log("Starting...")
